package bot

import (
	"context"
	"fmt"
	"log"
	"log/slog"
	"runtime/debug"
	"strconv"
	"strings"

	"m1pes/internal/logging"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"m1pes/internal/models"
)

type (
	StockService interface {
		GetCoinFromStockExchange(ctx context.Context, coinReq models.GetCoinRequest, apiKey, secretKey string) (models.GetCoinResponse, error)
		DeleteCoin(ctx context.Context, coinTag string, userId int64) error
		GetCoinList(ctx context.Context, userId int64) ([]models.Coin, error)
		ExistCoin(ctx context.Context, coinTag string) (bool, error)
		AddCoin(coin models.Coin) error
		InsertIncome(userID int64, coinTag string, income, count float64) error
		GetCoiniks(ctx context.Context, coinTag string) (models.Coiniks, error)
		EditBuy(ctx context.Context, userId int64, buy bool) error
		CreateOrder(apiKey, apiSecret string, order models.OrderCreate) (string, error)
		GetUserWalletBalance(ctx context.Context, apiKey, apiSecret string) (float64, error)
		GetApiKeyPermissions(ctx context.Context, apiKey, apiSecret string) (models.GetApiKeyPermissionsResponse, error)
	}

	UserService interface {
		UpdateUser(ctx context.Context, user models.User) error
		GetAllUsers(ctx context.Context) ([]models.User, error)
		NewUser(ctx context.Context, user models.User) error
		GetUser(ctx context.Context, userId int64) (models.User, error)
		GetIncomeLastDay(ctx context.Context, userID int64) (float64, error)
	}

	AlgorithmService interface {
		StartTrading(ctx context.Context, userId int64, actionChanMap map[int64]chan models.Message) error
		StopTrading(ctx context.Context, userID int64) error
		DeleteCoin(ctx context.Context, userId int64, coin string) error
	}
)

type Handler struct {
	as            AlgorithmService
	ss            StockService
	us            UserService
	actionChanMap map[int64]chan models.Message
}

const (
	SellAction = "sell"
	BuyAction  = "buy"

	ReportErrorChatId = -4216803774 // TG id of chat where bot sends errors.
)

func New(ss StockService, us UserService, as AlgorithmService, b *tgbotapi.BotAPI) *Handler {
	ctx := context.Background()

	h := &Handler{ss: ss, us: us, as: as, actionChanMap: make(map[int64]chan models.Message)}

	users, err := h.us.GetAllUsers(ctx)
	if err != nil {
		log.Fatalln(err)
	}

	// Starting trading for all users which have tradingActivated as true.
	for _, user := range users {
		if !user.TradingActivated {
			continue
		}

		update := &tgbotapi.Update{
			Message: &tgbotapi.Message{
				From: &tgbotapi.User{
					ID: user.Id,
				},
			},
		}

		h.StartTrading(ctx, b, update)
	}

	return h
}

// Handlers with Cmd at the end need for setting new status for user, after them should be normal handler.

func (h *Handler) Start(ctx context.Context, b *tgbotapi.BotAPI, update *tgbotapi.Update) {
	userId := update.Message.From.ID

	ctx = logging.WithUserId(ctx, userId)

	user := models.NewUser(userId)
	err := h.us.NewUser(ctx, user)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in NewUser", err)
	}

	msg := tgbotapi.NewMessage(userId, "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –±–∏—Ä–∂–∞—Ö!")
	_, err = b.Send(msg)
	if err != nil {
		log.Println(err)
	}
}

func (h *Handler) StopBuy(ctx context.Context, b *tgbotapi.BotAPI, update *tgbotapi.Update) {
	userId := update.Message.From.ID

	ctx = logging.WithUserId(ctx, userId)

	err := h.ss.EditBuy(ctx, userId, false)
	if err != nil {
		log.Println(err)
	}

	msg := tgbotapi.NewMessage(userId, "–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –º–æ–Ω–µ—Ç–∞—Ö –æ—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å—Ä–∞–∑—É –∫–∞–∫ –ø—Ä–æ–¥–∞–¥—É—Ç—Å—è")
	_, err = b.Send(msg)
	if err != nil {
		log.Println(err)
	}
}

func (h *Handler) StartBuy(ctx context.Context, b *tgbotapi.BotAPI, update *tgbotapi.Update) {
	userId := update.Message.From.ID

	ctx = logging.WithUserId(ctx, userId)

	err := h.ss.EditBuy(ctx, userId, true)
	if err != nil {
		log.Println(err)
	}

	msg := tgbotapi.NewMessage(userId, "–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –º–æ–Ω–µ—Ç–∞—Ö –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª–∞—Å—å")
	_, err = b.Send(msg)
	if err != nil {
		log.Println(err)
	}
}

func (h *Handler) StartTrading(ctx context.Context, b *tgbotapi.BotAPI, update *tgbotapi.Update) {
	userId := update.Message.From.ID

	ctx = logging.WithUserId(ctx, userId)
	err := h.ss.EditBuy(ctx, userId, true)
	if err != nil {
		log.Println(err)
	}

	user, err := h.us.GetUser(ctx, userId)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in GetUser", err)
	}

	// If this handler was triggered by message from user.
	if update.Message.Text != "" {
		// Check if trading already has been started.
		if user.TradingActivated {
			botMsg := tgbotapi.NewMessage(userId, "–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—é!)")
			_, err = b.Send(botMsg)
			if err != nil {
				slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in SendMessage", err)
			}
			return
		}
		// Check over.

		// Getting user's api and secret keys.
		if user.ApiKey == "" || user.SecretKey == "" {
			botMsg := tgbotapi.NewMessage(userId, "–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç api –∫–ª—é—á–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö - /changeKeys  –í–≤–µ–¥–∏—Ç–µ –≤–∞—à api –∏ secret –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–í–ê–ñ–ù–û: —É api –∫–ª—é—á–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞: –∑–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ, —Ç–æ—Ä–≥–æ–≤–ª—é –Ω–∞ —Å–ø–æ—Ç–æ–≤–æ–º —Ä—ã–Ω–∫—É –∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–∏.")
			_, err = b.Send(botMsg)
			if err != nil {
				slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in SendMessage", err)
			}

			return
		}
	}

	if _, ok := h.actionChanMap[userId]; !ok {
		h.actionChanMap[userId] = make(chan models.Message)
	}

	// This goroutine waits for action from algorithm.
	go func() {
		// This function needs for catching panics.
		defer func() {
			if r := recover(); r != nil {
				slog.ErrorContext(ctx, "Recovered in goroutine in Handler.StartTrading", slog.String("stacktrace", string(debug.Stack())), r)

				botMsg := tgbotapi.NewMessage(ReportErrorChatId, fmt.Sprintf("stacktrace: %s\n\npanic: %v", string(debug.Stack()), r))
				_, err := b.Send(botMsg)
				if err != nil {
					slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in SendMessage", err)
				}
			}
		}()

		for {
			funcUser := user

			msg := <-h.actionChanMap[funcUser.Id]

			var text string
			var chatId int64
			coiniks, err := h.ss.GetCoiniks(ctx, msg.Coin.Name)
			if err != nil {
				slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in GetCoiniks", err)
				msg.Action = err.Error()
			}

			switch msg.Action {
			case SellAction:
				a := trimTrailingZeros(fmt.Sprintf("%f", msg.Coin.CurrentPrice))
				d := trimTrailingZeros(fmt.Sprintf("%."+strconv.Itoa(coiniks.QtyDecimals)+"f", msg.Coin.Count))
				c := trimTrailingZeros(fmt.Sprintf("%.5f", msg.Coin.Income))

				def := fmt.Sprintf("–ú–æ–Ω–µ—Ç–∞: %s\n–ü–æ —Ü–µ–Ω–µ: %s\n–ö–æ–ª-–≤–æ: %s\n–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: %s üí≤", msg.Coin.Name, a, d, c)

				text = "–ü–†–û–î–ê–ñ–ê\n" + def
				chatId = msg.User.Id
			case BuyAction:
				a := trimTrailingZeros(fmt.Sprintf("%f", msg.Coin.Buy[len(msg.Coin.Buy)-1]))
				d := trimTrailingZeros(fmt.Sprintf("%."+strconv.Itoa(coiniks.QtyDecimals)+"f", msg.Coin.Count/float64(len(msg.Coin.Buy))))
				def := fmt.Sprintf("–ú–æ–Ω–µ—Ç–∞: %s\n–ü–æ —Ü–µ–Ω–µ: %s üí≤\n–ö–æ–ª-–≤–æ: %s", msg.Coin.Name, a, d)

				text = "–ü–û–ö–£–ü–ö–ê\n" + def
				chatId = msg.User.Id
			default:
				text = fmt.Sprintf("–û—à–∏–±–∫–∞: %s \nfile: %s line: %d", msg.Action, msg.File, msg.Line)
				chatId = ReportErrorChatId
			}
			botMsg := tgbotapi.NewMessage(chatId, text)
			_, err = b.Send(botMsg)
			if err != nil {
				slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in SendMessage", err)
			}
		}
	}()

	err = h.as.StartTrading(ctx, update.Message.From.ID, h.actionChanMap)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in StartTrading", err)
	}
	msg := tgbotapi.NewMessage(update.Message.From.ID, "–¢—ã –Ω–∞—á–∞–ª —Ç–æ—Ä–≥–æ–≤–ª—é, –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –∫—É–ø–∏—Ç –∏–ª–∏ –ø—Ä–æ–¥–∞—Å—Ç –º–æ–Ω–µ—Ç—ã!")
	_, err = b.Send(msg)
	if err != nil {
		log.Println(err)
	}
}

func (h *Handler) StopTrading(ctx context.Context, b *tgbotapi.BotAPI, update *tgbotapi.Update) {
	ctx = logging.WithUserId(ctx, update.Message.Chat.ID)

	err := h.as.StopTrading(ctx, update.Message.From.ID)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in StopTrading", err)
		return
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—é –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ!")
	_, err = b.Send(msg)
	if err != nil {
		log.Println(err)
	}
}

func (h *Handler) ChangeApiAndSecretKeyCmd(ctx context.Context, b *tgbotapi.BotAPI, update *tgbotapi.Update) {
	ctx = logging.WithUserId(ctx, update.Message.Chat.ID)

	botMsg := tgbotapi.NewMessage(update.Message.From.ID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à api –∏ secret –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–í–ê–ñ–ù–û: —É api –∫–ª—é—á–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞: –∑–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ, —Ç–æ—Ä–≥–æ–≤–ª—é –Ω–∞ —Å–ø–æ—Ç–æ–≤–æ–º —Ä—ã–Ω–∫–µ –∏ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–º–∏—Å—Å–∏–∏.")
	_, err := b.Send(botMsg)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in SendMessage", err)
	}

	updateUser := models.NewUser(update.Message.From.ID)
	updateUser.Status = "changeKeys"

	err = h.us.UpdateUser(ctx, updateUser)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in UpdateUser", err)
	}
}

func (h *Handler) ChangeApiAndSecretKey(ctx context.Context, b *tgbotapi.BotAPI, update *tgbotapi.Update) {
	ctx = logging.WithUserId(ctx, update.Message.Chat.ID)

	keys := strings.Split(update.Message.Text, " ")

	perm, err := h.ss.GetApiKeyPermissions(ctx, keys[0], keys[1])
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in NewApiAndSecretKey", err)
	}

	// Checking permissions.

	var isAllowed int
	for _, permission := range perm.Result.Permissions.Wallet {
		if permission == "Withdraw" {
			isAllowed++
			break
		}
	}

	for _, permission := range perm.Result.Permissions.Spot {
		if permission == "SpotTrade" {
			isAllowed++
			break
		}
	}

	if isAllowed != 2 || perm.Result.ReadOnly != 0 {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í —É–∫–∞–∑–∞–Ω–Ω–æ–º api –∫–ª—é—á–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.")
		_, err = b.Send(msg)
		if err != nil {
			slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in sending message", err)
		}

		return
	}

	// If everything ok:

	updateUser := models.NewUser(update.Message.From.ID)
	updateUser.ApiKey = keys[0]
	updateUser.SecretKey = keys[1]

	err = h.us.UpdateUser(ctx, updateUser)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in UpdateUser", err)
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ–∏ –∫–ª—é—á–∏ ;)")
	_, err = b.Send(msg)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in sending message", err)
	}
}

func (h *Handler) DeleteCoinCmd(ctx context.Context, b *tgbotapi.BotAPI, update *tgbotapi.Update) {
	ctx = logging.WithUserId(ctx, update.Message.Chat.ID)

	user := models.NewUser(update.Message.From.ID)
	user.Status = "deleteCoin"

	err := h.us.UpdateUser(ctx, user)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in UpdateStatus", err)
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã, –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
	_, err = b.Send(msg)
	if err != nil {
		log.Println(err)
	}
}

func (h *Handler) DeleteCoin(ctx context.Context, b *tgbotapi.BotAPI, update *tgbotapi.Update) {
	updateData, err := h.us.GetUser(ctx, update.Message.From.ID)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in GetUser", err)
	}

	user := models.NewUser(update.Message.From.ID)
	user.Status = "none"
	user.TradingActivated = updateData.TradingActivated

	err = h.us.UpdateUser(ctx, user)
	if err != nil {
		log.Println(err)
	}

	// Deleting coin from trading.
	err = h.as.DeleteCoin(ctx, update.Message.From.ID, update.Message.Text)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in StopTrading", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–¢—ã –Ω–µ —Ç–æ—Ä–≥—É–µ—à—å –Ω–∞ —ç—Ç–æ–π –º–æ–Ω–µ—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç - /coin")
		_, err = b.Send(msg)
		if err != nil {
			slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in sending message", err)
		}
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–¢—ã —É–¥–∞–ª–∏–ª —ç—Ç—É –º–æ–Ω–µ—Ç—É!")
		_, err = b.Send(msg)
		if err != nil {
			slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in sending message", err)
		}
	}

	// Deleting coin from db.
	err = h.ss.DeleteCoin(ctx, update.Message.Text, user.Id)
	if err != nil {
		slog.ErrorContext(ctx, "Error delete coin", err)
	}
}

func (h *Handler) GetCoinList(ctx context.Context, b *tgbotapi.BotAPI, update *tgbotapi.Update) {
	ctx = logging.WithUserId(ctx, update.Message.Chat.ID)
	user, err := h.us.GetUser(ctx, update.Message.From.ID)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in GetUser", err)
	}
	if user.ApiKey == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "—É —Ç–µ–±—è –Ω–µ—Ç apiKey –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @n1fawin")
		_, err = b.Send(msg)
		if err != nil {
			slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in SendMessage", err)
		}
		return
	}
	if user.SecretKey == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "—É —Ç–µ–±—è –Ω–µ—Ç secretKey –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @n1fawin")
		_, err = b.Send(msg)
		if err != nil {
			slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in SendMessage", err)
		}
		return
	}

	list, err := h.ss.GetCoinList(ctx, update.Message.Chat.ID)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in StockService.GetCoinList", err)
	}

	text := "–í–∞—à–∏ –º–æ–Ω–µ—Ç—ã:\n"

	bal, err := h.ss.GetUserWalletBalance(ctx, user.ApiKey, user.SecretKey)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in Get Balance Frim Bybit", err)
	}

	user.USDTBalance = bal

	err = h.us.UpdateUser(ctx, user)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in update user", err)
	}

	income, err := h.us.GetIncomeLastDay(ctx, user.Id)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in Get income", err)
	}

	var userSum float64
	for i := 0; i < len(list); i++ {
		var coinSum float64
		for d := 0; d < len(list[i].Buy); d++ {
			coinSum += list[i].Buy[d]
		}

		if len(list[i].Buy) != 0 {
			avg := coinSum / float64(len(list[i].Buy))

			userSum += list[i].Count * avg

			text += fmt.Sprintf("%s  –∫—É–ø–ª–µ–Ω–Ω–æ –Ω–∞: %.3füí≤\n", list[i].Name, list[i].Count*avg)
		} else {
			text += fmt.Sprintf("%s  –∫—É–ø–ª–µ–Ω–Ω–æ –Ω–∞: 0üí≤\n", list[i].Name)
		}
	}

	text += fmt.Sprintf("\n–°—É–º–∞—Ä–Ω—ã–π –∑–∞–∫—É–ø: %.3f", userSum)

	text += fmt.Sprintf("\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: %.4f", user.USDTBalance)

	text += fmt.Sprintf("\n–ó–∞—Ä–∞–±–æ—Ç–∞–ª –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å: %.3f", income/user.USDTBalance*100) + "%"

	text += fmt.Sprintf("\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å–∞: %.3f", userSum/user.USDTBalance*100) + "%"

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
	_, err = b.Send(msg)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in SendMessage", err)
	}
}

func (h *Handler) AddCoinCmd(ctx context.Context, b *tgbotapi.BotAPI, update *tgbotapi.Update) {
	ctx = logging.WithUserId(ctx, update.Message.Chat.ID)

	list, err := h.ss.GetCoinList(ctx, update.Message.Chat.ID)
	if err != nil {
		log.Println(err)
	}

	if len(list) < 5 {
		user := models.NewUser(update.Message.From.ID)
		user.Status = "addCoin"

		err = h.us.UpdateUser(ctx, user)
		if err != nil {
			log.Println(err)
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–°–∫–∏–Ω—å—Ç–µ —Ç–µ–≥ –∫–æ–π–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT –∏–ª–∏ ETHUSDT")
		_, err = b.Send(msg)
		if err != nil {
			log.Println(err)
		}
	} else {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å —É–∂–µ 5 –º–æ–Ω–µ—Ç, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é - —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é /delete")
		_, err = b.Send(msg)
		if err != nil {
			log.Println(err)
		}
	}
}

func (h *Handler) AddCoin(ctx context.Context, b *tgbotapi.BotAPI, update *tgbotapi.Update) {
	ctx = logging.WithUserId(ctx, update.Message.Chat.ID)
	user, err := h.us.GetUser(ctx, update.Message.From.ID)
	if err != nil {
		slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in GetUser", err)
	}
	if user.ApiKey == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "—É —Ç–µ–±—è –Ω–µ—Ç apiKey –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @n1fawin")
		_, err = b.Send(msg)
		if err != nil {
			slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in SendMessage", err)
		}
		return
	}
	if user.SecretKey == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "—É —Ç–µ–±—è –Ω–µ—Ç secretKey –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @n1fawin")
		_, err = b.Send(msg)
		if err != nil {
			slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in SendMessage", err)
		}
		return
	}
	can, err := h.ss.ExistCoin(ctx, update.Message.Text)
	if err != nil {
		log.Println(err)
	}
	if can {
		coiniks, err := h.ss.GetCoiniks(ctx, update.Message.Text)
		if err != nil {
			slog.ErrorContext(ctx, "Error getting coiniks", err)
			return
		}

		balance, err := h.ss.GetUserWalletBalance(ctx, user.ApiKey, user.SecretKey)
		if err != nil {
			slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in Get Balance Frim Bybit", err)
		}

		getCoinReqParams := make(models.GetCoinRequest)
		getCoinReqParams["category"] = "spot"
		getCoinReqParams["symbol"] = update.Message.Text

		getCoinResp, err := h.ss.GetCoinFromStockExchange(ctx, getCoinReqParams, user.ApiKey, user.SecretKey)
		if err != nil {
			slog.ErrorContext(ctx, "Error getting coin from algorithm", err)
			return
		}

		currentPrice, err := strconv.ParseFloat(getCoinResp.Result.List[0].Price, 64)
		if err != nil {
			slog.ErrorContext(ctx, "Error parsing current price to float", err)
			return
		}

		if balance*0.015/currentPrice < coiniks.MinSumBuy*1.1 {
			user := models.NewUser(update.Message.From.ID)
			user.Status = "none"

			err = h.us.UpdateUser(ctx, user)
			if err != nil {
				log.Println(err)
			}
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ù–∞ —ç—Ç–æ–π –º–æ–Ω–µ—Ç–µ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ - %.4f$ , –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ /addCoin", coiniks.MinSumBuy*1.1*currentPrice*67.0))
			_, err = b.Send(msg)
			if err != nil {
				log.Println(err)
			}
			return
		}

		coin := models.Coin{Name: update.Message.Text, UserId: update.Message.From.ID}
		err = h.ss.AddCoin(coin)
		if err != nil {
			log.Println(err)
		}

		user.Status = "none"

		err = h.us.UpdateUser(ctx, user)
		if err != nil {
			log.Println(err)
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ú–æ–Ω–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞")
		_, err = b.Send(msg)
		if err != nil {
			log.Println(err)
		}
	} else {
		user := models.NewUser(update.Message.From.ID)
		user.Status = "none"

		err = h.us.UpdateUser(ctx, user)
		if err != nil {
			log.Println(err)
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–¢–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ - /addCoin")
		_, err := b.Send(msg)
		if err != nil {
			log.Println(err)
		}
	}
}

func (h *Handler) UnknownCommand(ctx context.Context, b *tgbotapi.BotAPI, update *tgbotapi.Update) {
	ctx = logging.WithUserId(ctx, update.Message.Chat.ID)

	user, err := h.us.GetUser(ctx, update.Message.From.ID)
	if err != nil {
		log.Println(err)
	}

	switch user.Status {
	case "addCoin":
		h.AddCoin(ctx, b, update)
	case "deleteCoin":
		h.DeleteCoin(ctx, b, update)
	case "changeKeys":
		h.ChangeApiAndSecretKey(ctx, b, update)

		updateUser := models.NewUser(update.Message.From.ID)
		updateUser.Status = "none"

		err = h.us.UpdateUser(ctx, updateUser)
		if err != nil {
			slog.ErrorContext(logging.ErrorCtx(ctx, err), "error in UpdateUser", err)
		}
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç")
		_, err := b.Send(msg)
		if err != nil {
			log.Println(err)
		}
	}
}

func trimTrailingZeros(numStr string) string {
	f, err := strconv.ParseFloat(numStr, 64)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞:", err)
		return numStr
	}
	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
	trimmedStr := strconv.FormatFloat(f, 'f', -1, 64)

	// –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫—É, —É–¥–∞–ª–∏–º –≤—Å–µ –Ω—É–ª–∏, —Å—Ç–æ—è—â–∏–µ –≤ –∫–æ–Ω—Ü–µ
	if strings.Contains(trimmedStr, ".") {
		trimmedStr = strings.TrimRight(trimmedStr, "0")
		// –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏, —É–¥–∞–ª–∏–º –µ—ë —Ç–æ–∂–µ
		trimmedStr = strings.TrimRight(trimmedStr, ".")
	}

	return trimmedStr
}
